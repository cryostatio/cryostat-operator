// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha2

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/rhjmc/v1alpha2.FlightRecorder":       schema_pkg_apis_rhjmc_v1alpha2_FlightRecorder(ref),
		"./pkg/apis/rhjmc/v1alpha2.FlightRecorderSpec":   schema_pkg_apis_rhjmc_v1alpha2_FlightRecorderSpec(ref),
		"./pkg/apis/rhjmc/v1alpha2.FlightRecorderStatus": schema_pkg_apis_rhjmc_v1alpha2_FlightRecorderStatus(ref),
		"./pkg/apis/rhjmc/v1alpha2.Recording":            schema_pkg_apis_rhjmc_v1alpha2_Recording(ref),
		"./pkg/apis/rhjmc/v1alpha2.RecordingSpec":        schema_pkg_apis_rhjmc_v1alpha2_RecordingSpec(ref),
		"./pkg/apis/rhjmc/v1alpha2.RecordingStatus":      schema_pkg_apis_rhjmc_v1alpha2_RecordingStatus(ref),
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_FlightRecorder(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlightRecorder is the Schema for the flightrecorders API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/rhjmc/v1alpha2.FlightRecorderSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/rhjmc/v1alpha2.FlightRecorderStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/rhjmc/v1alpha2.FlightRecorderSpec", "./pkg/apis/rhjmc/v1alpha2.FlightRecorderStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_FlightRecorderSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlightRecorderSpec defines the desired state of FlightRecorder",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_FlightRecorderStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FlightRecorderStatus defines the observed state of FlightRecorder",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"events": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Listing of events available in the target JVM",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/rhjmc/v1alpha2.EventInfo"),
									},
								},
							},
						},
					},
					"target": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the pod/service that this object controls JFR for",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "JMX port for target JVM",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"recordingSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Recordings that match this selector belong to this FlightRecorder",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
				},
				Required: []string{"events", "target", "port", "recordingSelector"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/rhjmc/v1alpha2.EventInfo", "k8s.io/api/core/v1.ObjectReference", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_Recording(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Recording is the Schema for the recordings API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/rhjmc/v1alpha2.RecordingSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/rhjmc/v1alpha2.RecordingStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/rhjmc/v1alpha2.RecordingSpec", "./pkg/apis/rhjmc/v1alpha2.RecordingStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_RecordingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RecordingSpec defines the desired state of Recording",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the recording to be created",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"eventOptions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A list of event options to use when creating the recording. These are used to enable and fine-tune individual events. Examples: \"jdk.ExecutionSample:enabled=true\", \"jdk.ExecutionSample:period=200ms\"",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "The requested total duration of the recording, a zero value will record indefinitely",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "Desired state of the recording. If omitted, RUNNING will be assumed",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "eventOptions", "duration"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_rhjmc_v1alpha2_RecordingStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RecordingStatus defines the observed state of Recording",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "Current state of the recording",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Description: "The date/time when the recording started",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"duration": {
						SchemaProps: spec.SchemaProps{
							Description: "The duration of the recording specified during creation",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"downloadURL": {
						SchemaProps: spec.SchemaProps{
							Description: "A URL to download the JFR file for the recording",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"state", "startTime", "duration"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
